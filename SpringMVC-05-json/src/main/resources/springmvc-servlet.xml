<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- 自动扫描包，让指定的包注解生效，由IOC容器统一管理; 但是需要使用@Conponent，@Controller等等注解
            不在需要单独的配置，如下:
                <bean id="/hello" class="com.alvin.controller.HelloController"/>
    -->
    <context:component-scan base-package="com.alvin.controller"/>

    <!-- ==============================================================================================================-->
    <!--  以下部分是死的，一般雷打不动（不会变化）  -->
    <!-- ==============================================================================================================-->
    <!-- 配置 <mvc:default-servlet-handler/> 之后，Spring MVC上下文中会创建一个
        org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler 对象，
        其会作为一个过滤器，对请求的URL进行筛查，如果发现是静态资源请求，则由Web服务器默认的Servlet进行处理（Tip: 最开始的Web服务器只能处理 静态资源哟）;
        若不是静态资源的请求，才由 DispatcherServlet 进行处理。

        让Spring MVC 不对静态资源进行处理 (静态资源 : .js .css .html .mp3 .mp4 等等 )
     -->
    <mvc:default-servlet-handler/>

    <!-- 支持注解驱动
        在Spring中一般使用 @RequestMapping 注解来完成映射关系，想要让@RequestMapping生效
        必须向上下文(context)中注册 DefaultAnnotationHandlerMapping 和 AnnotationMethodhandlerAdapter 实例,
        这两个实例会在类级别和方法级别进行处理。
        而 annotation-driven 配置帮助我们自动完成上述两个实例的注入

        <mvc:annotation-driven/>    : 完成了以下俩个配置的功能
            1. HandlerMapping 映射器
            <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/>
            2. HandlerAdapter 控制器适配器
            <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/>
    -->
    <mvc:annotation-driven>
        <!-- 响应时期的 JSON 乱码问题解决 -->
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <constructor-arg value="utf-8"/>
            </bean>
            <!-- 这儿使用的是 Jackson -->
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="objectMapper">
                    <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                        <property name="failOnEmptyBeans" value="false"/>
                    </bean>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!-- %第 5 步% viewResolver 视图解析器
        1. 获取 ModelAndView 的数据
        2. 解析 ModelAndView 的名字
        3. 拼接视图名字 /WEB-INF/jsp/hello.jsp
        4. 数据渲染到视图上
    -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" id="internalResourceViewResolver">
        <!-- 前缀 -->
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <!-- 后缀 -->
        <property name="suffix" value=".jsp"/>
    </bean>
    <!-- ==============================================================================================================-->
</beans>